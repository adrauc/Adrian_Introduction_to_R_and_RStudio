- Class: meta
  Course: Adrian's Introduction to R and RStudio
  Lesson: Introduction to R and RStudio
  Author: Adrian Rauchfleisch
  Type: Standard
  Organization: National Taiwan University
  Version: 2.4.3
  
  
  
- Class: text
  Output: Dear Taida students, welcome to my R and RStudio introduction course. Whenever you see three points below (e.g. '...') then press the Enter-key to continue the lesson. Now press the Enter-key to continue.

- Class: text
  Output: Let's start with a short introduction of RStudio.

- Class: text
  Output: This is the console, here you see the code that is running. Here you can Enter code.

- Class: text
  Output: Above the console you usually have the scripts. If you use RStudio or a project for the first time, the script editor is not yet visible

- Class: text
  Output: We can easily open a new script. Just click on the symbol with white document, the green square and the white + in the top-left corner of the window. Then select 'R Script'


- Class: text
  Output: Now you have opened a new R script above. In class you get the scripts from me. If you write code, always first write the code into the script and don't forget to save regularly.

- Class: text
  Output: If you want to save a script, just click the disk symbol above the script editor. Try it out now. Save the script in the folder that is first opened.

- Class: text
  Output: Scripts are saved as .R files. They are just text files and can also be opened in a normal text editor.

- Class: text
  Output: If the script already exists, just click the disk symbol and the script will be saved in the same file.

- Class: text
  Output: In the top-right corner of the window you can see a symbol (box with R in it). Here you can create new RProjects. We will work with RProjects in this class. Click on the symbol and quickly check out the menu it opens. You could create a new project here.

- Class: text
  Output: For now, just continue the course.

- Class: text
  Output: In the bottom-right corner you see in the Files tab your current working directory. If we create a new RProject in RStudio, the folder of the project is the working directory. You can see all the files in this folder.

- Class: text
  Output: If you saved your script before correctly, you should see this file now in this window.

- Class: text
  Output: In the other tabs you can see Plots (the graphical output/ visualizations we create)

- Class: text
  Output: here you see all installed packages. You can manually load packages here, just select a box to load a package.

- Class: text
  Output: You can also install packages here. Just click on Install - then you can type the name of a package and install it. Cancel for now.

- Class: text
  Output: Help will automatically open if you use the ? together with the name of a function. 

- Class: text
  Output: We will not really use the viewer tab in this class. It can be user, e.g., as a browser (homepage will be visible)

- Class: text
  Output: In the top-right corner you see the environment. Shows all objects ?saved? in the environment. You can even click on objects and then see a preview that opens in the script window.

- Class: text
  Output: Ok, let's start with some basic code and functions.

- Class: text
  Output: When you see the '>' below in the console, you have to Enter code. R can be used like a calculator. Whenever you see the '>' below in the console during this lesson, you need to enter code and press Enter.


- Class: cmd_question
  Output: In its simplest form, R can be used as an interactive calculator. Type 1 + 4 into the console and then press Enter
  CorrectAnswer: 1 + 4
  AnswerTests: omnitest(correctExpr='1 + 4', correctVal=5)
  Hint: just type 1 + 4 in the console

- Class: text
  Output: You can see now the result in the console.

- Class: text
  Output: R simply prints the result of 5 by default. However, R is a programming
    language and often the reason we use a programming language as opposed to a calculator
    is to automate some process or avoid unnecessary repetition.

- Class: text
  Output: In this case, we may want to use our result from above in a second calculation.
    Instead of retyping 1 + 4 every time we need it, we can just create a new variable
    that stores the result.

- Class: text
  Output: 'The way you assign a value to a variable in R is by using the assignment
    operator, which is just a ''less than'' symbol followed by a ''minus'' sign. It
    looks like this: <-'

- Class: text
  Output: Think of the assignment operator as an arrow. You are assigning the value
    on the right side of the arrow to the variable name on the left side of the arrow.
  
- Class: cmd_question
  Output: To assign the result of 1 + 4 to a new variable called x, you type x <-
    1 + 4. This can be read as 'x gets 1 plus 4'. Give it a try now.
  CorrectAnswer: x <- 1 + 4
  AnswerTests: any_of_exprs('x <- 1 + 4', 'x <- 4 + 1')
  Hint: Type x <- 1 + 4. It's important to include a single space on each side of
    the assignment operator, but do NOT put a space between the `<` and the `-` that
    form the arrow.  
  
- Class: text
  Output: You'll notice that R did not print the result of 5 this time. When you
    use the assignment operator, R assumes that you don't want to see the result immediately,
    but rather that you intend to use the result for something else later on.  

- Class: text
  Output: Now you can see x as variable in the Environment tab in the top-right corner. All objects currently existing in the environment are visible in this tab.
  
- Class: cmd_question
  Output: To view the contents of the variable x, just type x and press Enter. Try
    it now.
  CorrectAnswer: x
  AnswerTests: omnitest(correctExpr='x')
  Hint: Type x and press Enter. This will automatically print the value of x.  
  
  
- Class: cmd_question
  Output: Now, store the result of x - 3 in a new variable called y.
  CorrectAnswer: y <- x - 3
  AnswerTests: omnitest(correctExpr='y <- x - 3')
  Hint: Type y <- x - 3 and press Enter. Whether you use x - 3 or x-3 is personal
    preference, but it's good habit to include a space on either side of the assignment
    operator.  
  
  
- Class: cmd_question
  Output: What is the value of y? Type y to find out.
  CorrectAnswer: 'y'
  AnswerTests: omnitest(correctExpr='y')
  Hint: Type y and press Enter.
  

- Class: text
  Output: Now, let's create a small collection of numbers called a vector. Any object that contains data is called a data structure and numeric vectors are the simplest type of data structure in R. In fact, even a single number is considered a vector of length one.  

- Class: cmd_question
  Output: The easiest way to create a vector is with the c() function, which stands
    for 'concatenate' or 'combine'. To create a vector containing the numbers 1.1,
    9, and 3.14, type c(1.1, 9, 3.14). Try it now and store the result in a variable
    called z.
  CorrectAnswer: z <- c(1.1, 9, 3.14)
  AnswerTests: omnitest(correctExpr='z <- c(1.1, 9, 3.14)')
  Hint: Inputting z <- c(1.1, 9, 3.14) will assign the vector (1.1, 9, 3.14) to a
    new variable called z. Including single spaces after the commas in the vector
    is not required, but helps make your code less cluttered and more readable.   
  
  

- Class: cmd_question
  Output: Anytime you have questions about a particular function, you can access R's
    built-in help files via the `?` command. For example, if you want more information
    on the c() function, type ?c without the parentheses that normally follow a function
    name. Give it a try.
  CorrectAnswer: ?c
  AnswerTests: omnitest(correctExpr='?c')
  Hint: Type ?c and press Enter. This will bring up the help file for the c() function.
  
  
- Class: cmd_question
  Output: Type z to view its contents. Notice that there are no commas separating
    the values in the output.
  CorrectAnswer: z
  AnswerTests: omnitest(correctExpr='z')
  Hint: Type z and press Enter to view its contents.
  
- Class: cmd_question
  Output: You can combine vectors to make a new vector. Create a new vector that contains
    z, 555, then z again in that order. Don't assign this vector to a new variable,
    so that we can just see the result immediately. Type c(z, 555, z)
  CorrectAnswer: c(z, 555, z)
  AnswerTests: omnitest(correctExpr='c(z, 555, z)')
  Hint: Type c(z, 555, z). Don't create a new variable. We just want to view the result.  

- Class: cmd_question
  Output: If you have a numeric vector, you can calculate the mean with the function mean(). In the parentheses you add the vector z as an argument. Let's try and type mean(z)
  CorrectAnswer: mean(z)
  AnswerTests: omnitest(correctExpr='mean(z)')
  Hint: Type mean(z)

- Class: text
  Output: Sometimes we want to extract a single value out or an object. The way you tell R that you want to select some particular elements (i.e. a 'subset') from a vector is by placing an 'index vector' in square brackets immediately following the name of the vector.

- Class: cmd_question
  Output: For a simple example, try z[1] to view the first element of z.
  CorrectAnswer: z[1]
  AnswerTests: omnitest(correctExpr='z[1]')
  Hint: View the first element of z with z[1].

- Class: cmd_question
  Output: If you want to extract value 1 and 3 - use a vector. Try z[c(1, 3)] to view the first and third element of z.
  CorrectAnswer: z[c(1, 3)]
  AnswerTests: omnitest(correctExpr='z[c(1, 3)]')
  Hint: View the first and third element of z with z[c(1, 3)].

- Class: cmd_question
  Output: The simplest way to create a sequence of numbers in R is by using the `:`
    operator. Type 1:20 to see how it works.
  CorrectAnswer: '1:20'
  AnswerTests: omnitest(correctExpr='1:20')
  Hint: Type 1:20 with no spaces. Make sure to use a regular colon and NOT a semi-colon.
  

- Class: text
  Output: That gave us every integer between (and including) 1 and 20. Now we will use this to subset vector z.

- Class: cmd_question
  Output: 'What happens if we do 3:1? Give it a try to find out.'
  CorrectAnswer: '3:1'
  AnswerTests: omnitest(correctExpr='3:1')
  Hint: Type 3:1 and press Enter.
  
- Class: text
  Output: It counted backwards in increments of 1

- Class: cmd_question
  Output: If you want to extract value 1 to 3 - use a vector. Try z[c(1:3)] to view the first and third element of z.
  CorrectAnswer: z[c(1:3)]
  AnswerTests: omnitest(correctExpr='z[c(1:3)]')
  Hint: View the first to the third element of z with z[c(1:3)].
  
- Class: cmd_question
  Output: We can change the order of z. Try z[c(3:1)] to change the order
  CorrectAnswer: z[c(3:1)]
  AnswerTests: omnitest(correctExpr='z[c(3:1)]')
  Hint: Change the order of z with z[c(3:1)].

- Class: text
  Output: "Remember that if you have questions about a particular R function, you
    can access its documentation with a question mark followed by the function name:
    ?function_name_here. However, in the case of an operator like the colon used above,
    you must enclose the symbol in backticks like this: ?`:`. (NOTE: The backtick
    (`) key is generally located in the top left corner of a keyboard, above the Tab
    key. If you don't have a backtick key, you can use regular quotes.)"  
  
- Class: text
  Output: Every vector has only data type. You now have seen the numeric data type. We can also use the character data type.

- Class: text
  Output: In R all strings (character data) have quotations.

- Class: cmd_question
  Output: Let's use my name as a string. Assign "Adrian" to the new object teacher. Type teacher <- "Adrian"
  CorrectAnswer: teacher <- "Adrian"
  AnswerTests: omnitest(correctExpr='teacher <- "Adrian"')
  Hint: type teacher <- "Adrian".
  
- Class: cmd_question
  Output: Type teacher to view its contents. Notice quotation marks that indicate the data type (character).
  CorrectAnswer: teacher
  AnswerTests: omnitest(correctExpr='teacher')
  Hint: Type teacher and press Enter to view its contents.
  

- Class: cmd_question
  Output: You can combine differnet strings to make a new vector. We can add other names to the vector. Type c(teacher, "Zhao Zhen")
  CorrectAnswer: c(teacher, "Zhao Zhen")
  AnswerTests: omnitest(correctExpr='c(teacher, "Zhao Zhen")')
  Hint: Type c(teacher, "Zhao Zhen"). Don't create a new variable. We just want to view the result.  

- Class: cmd_question
  Output: If you want to save the new names to the variable type teacher  <- c(teacher, "Zhao Zhen")
  CorrectAnswer: teacher  <- c(teacher, "Zhao Zhen")
  AnswerTests: omnitest(correctExpr='teacher  <- c(teacher, "Zhao Zhen")')
  Hint: Type teacher  <- c(teacher, "Zhao Zhen").
  
- Class: cmd_question
  Output: Type teacher to view its contents. No we have two strings in this vector.
  CorrectAnswer: teacher
  AnswerTests: omnitest(correctExpr='teacher')
  Hint: Type teacher and press Enter to view its contents.
  
- Class: cmd_question
  Output: You can also subest this vector. Type teacher[2] to only see the name of the second teacher
  CorrectAnswer: teacher[2]
  AnswerTests: omnitest(correctExpr='teacher[2]')
  Hint: Type teacher[2] and press Enter to only see the second name.
  
- Class: cmd_question
  Output: Test what happens if you use quotation marks for teacher. Type If you want to save the new names to the variable type c("teacher", "Zhao Zhen")
  CorrectAnswer: c("teacher", "Zhao Zhen")
  AnswerTests: omnitest(correctExpr='c("teacher", "Zhao Zhen")')
  Hint: Type c("teacher", "Zhao Zhen") and press Enter.
  
- Class: text
  Output: If you use quotation marks the name will be interpreted as string. If you don't use quotation marks, the name will be interpreted as name of an object or as a function name.


- Class: mult_question
  Output: Thank you for finishing this class. Press Enter and then please copy the code in the console into an email with the title "[COU Lesson 1]" and send to adrian.rauchfleisch@gmail.com. Would you like to get the completion code? Type the number next to Yes and press Enter - then you need to Enter your student id and name.
  CorrectAnswer: NULL
  AnswerChoices: Yes;No
  AnswerTests: get_token()
  Hint: NULL

